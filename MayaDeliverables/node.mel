//createNode transform -n Tetgen1; 
//createNode mesh -n TetgenShape1 -p Tetgen1; 
//sets -add initialShadingGroup TetgenShape1; 
//createNode LSTetgenNode -n LSTetgenNode1; 
//connectAttr pSphereShape1.outMesh LSTetgenNode1.inputMesh;
//connectAttr pSphere1.worldMatrix[0] LSTetgenNode1.wm;
//connectAttr LSTetgenNode1.outputMesh TetgenShape1.inMesh;
//setAttr LSTetgenNode1.ofp -type "string" "G:\\mayaSphere";

// Mel Script for setting up Tetgen node
string $selectedItems[] = `ls -sl -dag`;
int $numItems = size($selectedItems);
if ($numItems<2)
    error "Please select atleast one shape or transform node in order to run the command";
else
{
	int $i = 0;
	int $j = 0;
	for( $i=0; $i < size($selectedItems); $i = $i+2)
	{
		$j = $i+1;
		string $nodeT = $selectedItems[$i];
		string $nodeS = $selectedItems[$j];
		string $outputT = `createNode transform`; // new transform node node used to display the output from tetgen
		string $outputS = `createNode mesh`; // new mesh (shape) node used to display the output from tetgen
		parent -s -relative $outputS $outputT;
		sets -add initialShadingGroup $outputS;
		string $tetgenNode = `createNode LSTetgenNode`;
		connectAttr ($nodeS+".outMesh") ($tetgenNode+".inputMesh");
		connectAttr ($nodeT+".worldMatrix[0]") ($tetgenNode+".wm");
		connectAttr ($tetgenNode+".outputMesh") ($outputS+".inMesh");
		string $fileName = "G:\\tetgenOutput"; // optional output to file option for the user to save the tetrahedralized geometry
		setAttr ($tetgenNode+".ofp") -type "string" $fileName;
	}
}
